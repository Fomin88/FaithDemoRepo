{
	"name": "EmpDepDataFlow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "EmpDataDataset",
						"type": "DatasetReference"
					},
					"name": "EmployeesData"
				},
				{
					"dataset": {
						"referenceName": "DepDataDataset",
						"type": "DatasetReference"
					},
					"name": "DepData"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SinkDataset",
						"type": "DatasetReference"
					},
					"name": "sinkoutput"
				}
			],
			"transformations": [
				{
					"name": "joinEmoDataDepData"
				}
			],
			"scriptLines": [
				"parameters{",
				"     parameter1 as string ({1  depid})",
				"}",
				"source(output(",
				"          {1  emid} as string,",
				"          name as string,",
				"          country as string,",
				"          department as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> EmployeesData",
				"source(output(",
				"          {1  depid} as string,",
				"          depname as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DepData",
				"EmployeesData, DepData join(department == {1  depid},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinEmoDataDepData",
				"joinEmoDataDepData sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['empanddepdata'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     partitionBy('hash', 1)) ~> sinkoutput"
			]
		}
	}
}